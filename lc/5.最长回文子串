//暴力法
class Solution {
public:
    bool valid(string s,int left,int right){
        while(left < right){
            if(s[left] != s[right]){
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
    string longestPalindrome(string s) {
        int len = s.length();
        if(len < 2) return s;
        int max = 1;
        string res = s.substr(0,1);

        for(int i=0;i<len-1;i++){
            for(int j=i+1;j<len;j++){
                if(j-i+1 > max && valid(s,i,j)){
                    max = j-i+1;
                    res = s.substr(i,max);
                }
            }
        }
        return res;
    }
};
//动态规划
class Solution {
public:
    string longestPalindrome(string s) {
        int len = s.size();
        vector<vector<int>> dp(len,vector<int>(len));
        string res;
        //子串长度
        for(int l=0;l<len;++l){
            for(int i=0;i+l<len;++i){
                int j = i+l;    //子串结尾
                if(l==0){   //长度为1
                    dp[i][j] = 1;
                }else if(l == 1){   //长度为2
                    dp[i][j] = (s[i]==s[j]);
                }else{  //长度大于2
                    dp[i][j] = (s[i]==s[j] && dp[i+1][j-1]);
                }
                //更新结果
                if(dp[i][j] && l+1 > res.size()){
                    res = s.substr(i,l+1);
                }
            }
        }
        return res;
    }
};

//中心拓展
class Solution {
public:
    pair<int,int> extend(string &s,int left,int right){
        while(left >=0 && right<s.size() && s[left] == s[right]){
            --left;
            ++right;
        }
        return {left+1,right-1};
    }
    string longestPalindrome(string s) {
        int start = 0,end = 0;
        for(int i=0;i<s.size();i++){
            auto [left1,right1] = extend(s,i,i);
            auto [left2,right2] = extend(s,i,i+1);
            if(right1 - left1 > end - start){
                start = left1;
                end = right1;
            }
            if(right2-left2 > end-start){
                start = left2;
                end = right2;
            }
        }
        return s.substr(start,end-start+1);
    }
};
