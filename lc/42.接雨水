class Solution {
public:
    int trap(vector<int>& height) {
        int res=0;
        int size = height.size(); //写在循环外面，.size()返回unsigned int，如果vector大小是0，再-1会变成无穷大，造成死循环
        for(int i=1;i<size-1;i++){
            int lm=0,rm=0;
            for(int j=i;j>=0;j--)
                lm = max(lm,height[j]);
            for(int j=i;j<size;j++)
                rm = max(rm,height[j]);
            res = res+min(lm,rm)-height[i];
        }
        return res;
    }
};
//动态规划，省去了遍历过程
class Solution {
public:
    int trap(vector<int>& height) {
        int res=0;
        int size = height.size();
        int *max_left = new int[size];
        int *max_right = new int[size];

        for(int i=1;i<size-1;i++)
            max_left[i] = max(max_left[i-1],height[i-1]);
        for(int i=size-2;i>=0;i--)
            max_right[i] = max(max_right[i+1],height[i+1]);
        for(int i=1;i<size-1;i++){
            int temp = min(max_left[i],max_right[i]);
            if(temp>height[i])
                res += temp-height[i];
        }
        return res;
    }
};
