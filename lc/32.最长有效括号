//栈
class Solution {
public:
    int longestValidParentheses(string s) {
        if(s.length()<2)    return 0;
        int res = 0;
        stack<int> stk;
        stk.push(-1);
        for(int i=0;i<s.length();i++){
            if(s[i]=='('){  //左括号
                stk.push(i);
            }else{  //右括号
                stk.pop();
                if(stk.empty()){
                    stk.push(i);
                }else{
                    res = max(res,i-stk.top());
                }
            }
        }
        return res;
    }
};
//动态规划
class Solution {
public:
    int longestValidParentheses(string s) {
        int len = s.length();
        int res = 0;
        vector<int> dp(len,0);
        for(int i=1;i<len;i++){
            if(s[i]==')'){
                if(s[i-1]=='('){
                    dp[i] = (i>=2?dp[i-2]:0)+2;
                }else if((i-dp[i-1]>0)&&s[i-1-dp[i-1]]=='('){
                    dp[i] = dp[i-1]+2+dp[i-1-dp[i-1]]+((i - dp[i - 1]) >= 2 ? dp[i - dp[i - 1] - 2] : 0);
                }
                res = max(res,dp[i]);
            }
        }
        return res;
    }
};
