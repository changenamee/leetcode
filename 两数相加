//一开始想都算出来再导回去，结果要算10的100次方.....
//脑子啊.....
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        long add = num(l1)+num(l2);
        ListNode *res = new ListNode();
        ListNode *temp = res;
        while(add){
            int a = add%10;
            temp->val = a;
            add = add/10;
            if(add){
                temp->next = new ListNode();
                temp = temp->next;
            }
            //break;
        }
        return res;
    }
    long num(ListNode* list){
        long res = 0;
        int cnt = 0;
        ListNode* temp = list;
        while(temp){
            res = res + temp->val*pow(10,cnt++);    //10的100次方......
            temp = temp->next;
        }
        return res;
    }
};

//逐位相加，注意进位
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *head = nullptr,*end = nullptr;
        int up = 0; //进位
        int sum;    //对位相加之和
        while(l1 || l2){
            int a = l1 ? l1->val : 0;
            int b = l2 ? l2->val : 0;
            sum = a+b+up;
            up = sum / 10;
            if(!head){  //头结点
                head = end = new ListNode(sum%10);  //指针指向一个地址，new新分配一段空间，返回分配空间的首地址
            }else{
                end->next = new ListNode(sum%10);
                end = end->next;
            }
            if(l1)  l1=l1->next;
            if(l2)  l2=l2->next; 
        }
        if(up){
            end->next = new ListNode(up);
        }
        return head;
    }
};
