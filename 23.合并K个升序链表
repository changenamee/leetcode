/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
//分治
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int len = lists.size();
        if(len==0)  return nullptr;
        return merge(lists,0,len-1);
    }
    ListNode* merge(vector<ListNode*> &lists,int start,int end){
        if(start==end)  return lists[start];
        int mid = (start+end)/2;
        ListNode *l1 = merge(lists,start,mid);
        ListNode *l2 = merge(lists,mid+1,end);
        return mergeTwo(l1,l2);
    }
    ListNode* mergeTwo(ListNode *l1,ListNode *l2){
        if(!l1) return l2;
        if(!l2) return l1;
        if(l1->val <= l2->val){
            l1->next = mergeTwo(l1->next,l2);
            return l1;
        }else{
            l2->next = mergeTwo(l1,l2->next);
            return l2;
        }
    }
};
